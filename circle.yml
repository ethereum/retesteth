defaults:

  upload-hunter-cache: &upload-hunter-cache
    run:
      name: "Upload Hunter cache"
      working_directory: ~/build
      command: |  # Upload Hunter cache if not PR build.
        if [ ! "$CIRCLE_PR_NUMBER" ]; then
          cmake --build . --target hunter_upload_cache
        fi

  environment-info: &environment-info
    run:
      name: "Environment info"
      command: |
        echo CXX: $CXX
        $CXX --version
        $CXX --version > compiler.version

  configure: &configure
    run:
      name: "Configure"
      # Build "out-of-source" to have better coverage report
      # (ninja is using relative paths otherwise).
      working_directory: ~/build
      command: |
        cmake ../project -G "$GENERATOR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCOVERAGE=ON $CMAKE_OPTIONS

  configureMac: &configureMac
    run:
      name: "ConfigureMac"
      working_directory: ~/build
      command: |
        cmake ../project -G "$GENERATOR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCOVERAGE=ON $CMAKE_OPTIONS -DCMAKE_TOOLCHAIN_FILE=~/project/toolchain.cmake

  build: &build
    run:
      name: "Build"
      working_directory: ~/build
      command: cmake --build . -- -j $BUILD_PARALLEL_JOBS

  test: &test
    run:
      name: "Test"
      working_directory: ~/build/retesteth
      command: |
        if [ $(uname) = Linux ]; then
          export TMPDIR=/dev/shm
        fi
        ./retesteth -t TestHelperSuite
        ./retesteth -t EthObjectsSuite
        ./retesteth -t DataObjectTestSuite
#        ./retesteth -t LLLCSuite
#        git clone --depth 1 https://github.com/ethereum/tests.git
#        export ETHEREUM_TEST_PATH=~/build/testeth/tests
#        ctest --output-on-failure -j $TEST_PARALLEL_JOBS

  store-retesteth: &store-retesteth
    store_artifacts:
      path: ~/build/retesteth
      destination: retesteth

  upload-coverage-data: &upload-coverage-data
    run:
      name: "Upload coverage data"
      command: |
        pwd
        $GCOV --version
        codecov --required --gcov-exec "$GCOV" --gcov-root ~/build

  install-solidity-mac: &install-solidity-mac
    run:
      name: "Install solidity"
      command: |
        brew update
        brew install wget
        wget -O boost_1_67_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.67.0/boost_1_67_0.tar.gz/download
        tar xzvf boost_1_67_0.tar.gz
        cd boost_1_67_0
        ./bootstrap.sh
        sudo ./b2 install
        cd ..
        git clone https://github.com/ethereum/solidity.git
        cd solidity
        mkdir build
        cd build
        cmake .. -DLLL=1 -DUSE_Z3=0
        sudo make install lllc -j $BUILD_PARALLEL_JOBS
  install-solidity: &install-solidity
    run:
      name: "Install solidity"
      command: |
        sudo apt-get update
        sudo apt-get -y install wget python-dev
        wget -O boost_1_67_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.67.0/boost_1_67_0.tar.gz/download
        tar xzvf boost_1_67_0.tar.gz
        cd boost_1_67_0
        ./bootstrap.sh
        sudo ./b2 install
        cd ..
        git clone https://github.com/ethereum/solidity.git
        cd solidity
        mkdir build
        cd build
        cmake .. -DLLL=1 -DUSE_Z3=0 -DTESTS=0
        sudo make install lllc -j $BUILD_PARALLEL_JOBS
        
  linux-steps: &linux-steps
    - checkout
    - *environment-info
    - *configure
#    - *upload-hunter-cache
#    - *install-solidity
    - *build
    - *store-retesteth
    - *test
#    - *upload-coverage-data


version: 2
jobs:

  Linux-Clang6:
    environment:
      - CXX: clang++-6.0
      - CC:  clang-6.0
      - GCOV: llvm-cov-6.0 gcov
      - GENERATOR: Ninja
      - BUILD_PARALLEL_JOBS: 8
      - TEST_PARALLEL_JOBS: 8
    docker:
      - image: ethereum/cpp-build-env:7
    steps: *linux-steps

  Linux-GCC6-Debug:
    environment:
      - BUILD_TYPE: Debug
      - CXX: g++-6
      - CC:  gcc-6
      - GCOV: gcov-6
      - GENERATOR: Ninja
      - BUILD_PARALLEL_JOBS: 4
      - TEST_PARALLEL_JOBS: 4
      # TODO: Fix memory leaks reported in leveldb.
      # - CMAKE_OPTIONS: -DSANITIZE=address
      # - ASAN_OPTIONS: detect_leaks=0
    docker:
      - image: ethereum/cpp-build-env:7
    steps: *linux-steps

  macOS-XCode9:
    environment:
      - CXX: clang++
      - GCOV: gcov
      - GENERATOR: Ninja
      - BUILD_PARALLEL_JOBS: 8
      - TEST_PARALLEL_JOBS: 8
    macos:
      xcode: "9.0"
    steps:
      - checkout
      - *environment-info
      - run:
          name: "Install macOS dependencies"
          # Python3 and requests are needed for Hunter upload.
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install -q llvm37 cmake ninja python3
            pip3 install -q requests gitpython
      - *configureMac
#      - *upload-hunter-cache
#      - *install-solidity-mac
      - *build
      - *store-retesteth
      - *test
#      - *upload-coverage-data

# TODO: Run GCC6 build only in develop branch.
# TODO: Enabled nightly builds and add more configs.
# TODO: Separate builds from testing jobs.
workflows:
  version: 2
  cpp-ethereum:
    jobs:
      - macOS-XCode9
      - Linux-Clang6
      - Linux-GCC6-Debug
